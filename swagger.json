{
  "openapi": "3.1.0",
  "info": {
    "title": "Reume - API Documentation",
    "version": "1.0.0",
    "description": "This is the API documentation for the Reume application."
  },
  "servers": [
    {
      "url": "/api",
      "description": "API base URL"
    }
  ],
  "tags": [
    {
      "name": "Health",
      "description": "Health check endpoints"
    },
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "OTP",
      "description": "OTP endpoints"
    },
    {
      "name": "Schedule",
      "description": "Schedule endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "Verifies the health of the API",
        "description": "Verifies the health of the API",
        "tags": ["Health"],
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Health status message"
                    }
                  },
                  "example": {
                    "status": "The API is healthy"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Creates a new user account with the provided information",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "object",
                      "description": "Validation errors"
                    }
                  },
                  "example": {
                    "errors": {
                      "email": "Invalid email format",
                      "password": "Password must be at least 6 characters long"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "User with this email already exists"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login a user",
        "description": "Authenticates a user with the provided credentials",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUserRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/LoginUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Validation errors"
                    }
                  },
                  "example": {
                    "errors": {
                      "email": "Invalid email format",
                      "password": "Password must be at least 6 characters long"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Invalid email or password"
                  }
                }
              }
            }
          },
          "403": {
            "description": "User account is no verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "User is not verified"
                  }
                }
              }
            }
          }
        }
      }

    },
    "/otp/verify": {
      "post": {
        "summary": "Verify OTP",
        "description": "Verifies the OTP for the user",
        "tags": ["OTP"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOtpRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOtpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified successfully"
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Invalid OTP"
                  }
                }
              }
            }
          },
          "404": {
            "description": "OTP not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "OTP not found"
                  }
                }
              }
            }
          },
          "409": {
            "description": "OTP already used",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "OTP already used"
                  }
                }
              }
            }
          },
          "410": {
            "description": "OTP expired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "OTP has expired"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/otp/resend": {
      "post": {
        "summary": "Resend OTP",
        "description": "Resends the OTP to the user",
        "tags": ["OTP"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendOtpRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ResendOtpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP resent successfully"
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Invalid user email"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "User not found"
                  }
                }
              }
            }
          },
          "409": {
            "description": "User already verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "User already verified"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Too many requests"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schedule/": {
      "post": {
        "summary": "Create a new schedule",
        "description": "Creates a new schedule",
        "tags": ["Schedule"],
        "security": [
          { "bearerAuth": [] }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduleRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduleRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Schedule created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Invalid schedule data"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Unauthorized access"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Conflict error"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all schedules",
        "description": "Retrieves all schedules",
        "tags": ["Schedule"],
        "security": [
          { "bearerAuth": [] }
        ],
        "responses": {
          "200": {
            "description": "Schedules retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Unauthorized access"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schedule/available-times/{date}": {
      "get": {
        "summary": "Get available time slots for a specific date",
        "description": "Returns available time slots (6AM to 6PM in 15-minute intervals) excluding already scheduled appointments. When updating an existing schedule, provide the schedule UUID in the schedule parameter to exclude it from conflict checking.",
        "tags": ["Schedule"],
        "security": [
          { "bearerAuth": [] }
        ],
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "description": "Date in YYYY-MM-DD format",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2025-06-15"
            }
          },
          {
            "name": "schedule",
            "in": "query",
            "required": false,
            "description": "UUID of the schedule being updated. When provided, the system will exclude this specific schedule from conflict checking to allow updating it with overlapping times.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Available times retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "availableTimes": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Time slot in HH:MM format",
                        "example": "09:15"
                      },
                      "description": "Array of available time slots"
                    }
                  },
                  "example": {
                    "availableTimes": ["06:00", "06:15", "06:30", "10:00", "10:15", "15:00", "15:15", "17:45"]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid date format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Invalid date format. Expected YYYY-MM-DD"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Unauthorized access"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schedule/{id}": {
      "put": {
        "summary": "Update a schedule",
        "description": "Updates an existing schedule",
        "tags": ["Schedule"],
        "security": [
          { "bearerAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the schedule to update",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduleRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schedule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Invalid schedule data"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Unauthorized access"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "You do not have permission to update this schedule"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Schedule not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Schedule not found"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Conflict error"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a schedule",
        "description": "Deletes a schedule by ID",
        "tags": ["Schedule"],
        "security": [
          { "bearerAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the schedule to delete",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Schedule deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Unauthorized access"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "You do not have permission to delete this schedule"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Schedule not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "example": {
                    "message": "Schedule not found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/": {
      "get": {
        "summary": "Get all users",
        "description": "Retrieves a list of all users in the system",
        "tags": ["User"],
        "security": [
          { "bearerAuth": [] }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserWithSchedulesCountResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Unauthorized access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Insufficient permissions"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Retrieves information for a specific user by their ID",
        "tags": ["User"],
        "security": [
          { "bearerAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the user",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithSchedulesCountResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No active session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Unauthorized access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Insufficient permissions"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user information",
        "description": "Updates the information of a specific user. Users can only update their own information unless they have admin role.",
        "tags": ["User"],
        "security": [
          { "bearerAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the user to update",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "object",
                      "description": "Validation errors",
                      "example": {
                        "email": "Invalid email format",
                        "phone": "Invalid phone number format"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No active session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Unauthorized access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to update this user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "You do not have permission to update this user"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterUserRequest": {
        "type": "object",
        "required": ["firstname", "lastname", "email", "password"],
        "properties": {
          "firstname": {
            "type": "string",
            "description": "User's first name",
            "example": "John",
            "minLength": 1
          },
          "lastname": {
            "type": "string",
            "description": "User's last name",
            "example": "Doe",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "john.doe@example.com",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "User's password",
            "example": "mySecurePassword123!",
            "minLength": 6
          },
          "phone": {
            "type": "string",
            "description": "User's phone number (optional)",
            "example": "+1234567890"
          }
        }
      },
      "LoginUserRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "User's password",
            "example": "mySecurePassword123!"
          }
        }
      },
      "VerifyOtpRequest": {
        "type": "object",
        "required": ["userId", "otp"],
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "User's unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "otp": {
            "type": "string",
            "description": "OTP to verify",
            "example": "123456",
            "minLength": 6,
            "maxLength": 6
          }
        }
      },
      "ResendOtpRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "john.doe@example.com"
          }
        }
      },
      "CreateScheduleRequest": {
        "type": "object",
        "required": ["title", "startTime", "endTime"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the schedule",
            "example": "Meeting with client"
          },
          "startTime": {
            "type": "string",
            "format": "time",
            "description": "Start time of the schedule",
            "example": "2025-05-23T12:30:00.000Z"
          },
          "endTime": {
            "type": "string",
            "format": "time",
            "description": "End time of the schedule",
            "example": "2025-05-23T13:30:00.000Z"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "description": "User's first name",
            "example": "Jane",
            "minLength": 1,
            "maxLength": 50
          },
          "lastname": {
            "type": "string",
            "description": "User's last name",
            "example": "Smith",
            "minLength": 1,
            "maxLength": 50
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "+1234567890",
            "pattern": "^\\+?[0-9]{6,15}$"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "User's unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "description": "User's first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "john.doe@example.com"
          },
          "role": {
            "type": "string",
            "enum": ["USER", "ADMIN"],
            "description": "User's role",
            "example": "USER"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the user is verified",
            "example": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Account creation timestamp",
            "example": "2024-03-30T12:00:00Z"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number (if provided)",
            "example": "+1234567890"
          }
        }
      },
      "UserWithSchedulesCountResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "User's unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "description": "User's first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "john.doe@example.com"
          },
          "role": {
            "type": "string",
            "enum": ["USER", "ADMIN"],
            "description": "User's role",
            "example": "USER"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the user is verified",
            "example": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Account creation timestamp",
            "example": "2024-03-30T12:00:00Z"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number (if provided)",
            "example": "+1234567890"
          },
          "schedulesCount": {
            "type": "integer",
            "description": "Number of schedules/appointments this user has",
            "example": 5
          }
        }
      },
      "LoginUserResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token for authentication",

            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          }
        }
      },
      "VerifyOtpResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "OTP verified successfully"
          }
        }
      },
      "ResendOtpResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "OTP resent successfully"
          }
        }
      },
      "ScheduleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Schedule's unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "title": {
            "type": "string",
            "description": "Title of the schedule",
            "example": "Meeting with client"
          },
          "startTime": {
            "type": "string",
            "format": "time",
            "description": "Start time of the schedule",
            "example": "2025-05-23T12:30:00.000Z"
          },
          "endTime": {
            "type": "string",
            "format": "time",
            "description": "End time of the schedule",
            "example": "2025-05-23T13:30:00.000Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Schedule creation timestamp",
            "example": "2025-05-23T16:07:05.056Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Schedule update timestamp",
            "example": "2025-05-23T16:07:05.056Z"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
